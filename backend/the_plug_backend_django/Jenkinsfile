pipeline {
    agent any

    environment {
        SONAR_TOKEN_BACKEND = credentials('sonar-token-backend')
        DB_PASSWORD = credentials('db-password')
        DB_USER = 'admin'
        DB_NAME = 'postgres'
        DB_HOST = 'localhost:5432'
        EMAIL_HOST_PASSWORD = credentials('email-host-password')
        EMAIL_HOST_USER = credentials('email-host-user')
        SECRET_KEY = credentials('secret-key')
        ALLOWED_HOSTS = '*'
        DEBUG = '1'
        CACHE_ENDPOINT = 'no'
        CACHE_PASSWORD = 'no'
        USE_CACHE = '0'
        DOCKER_REGISTRY = 'https://docker.io'
        BACKEND_IMAGE = 'wallys02/the-plug-backend'
        PIP_CACHE_DIR = "${env.HOME}/.cache/pip"
        NPM_CONFIG_CACHE = "${env.HOME}/.cache/npm"
        KUBECONFIG = "${env.HOME}/.kube/config"
        BACKEND_DIR = 'backend/the_plug_backend_django'
        FRONTEND_DIR = 'frontend/the_plug_svelte_frontend'
        CHANGESET_DIR = 'backend/**'
    }

    triggers {
        pollSCM '* * * * *'
    }

    stages {
            /*stage('SonarQube Analysis') {
                when {
                    changeset 'backend/**'
                }

                environment {
                    SCANNER_HOME = tool 'sonar-scanner-7'
                }

                steps {
                    dir("${BACKEND_DIR}") {
                        withSonarQubeEnv('sonar-backend') {
                            sh("${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.token=${SONAR_TOKEN_BACKEND}")
                        }
                    }
                }
            }*/

            stage('Backend Tests') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    dir("${BACKEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                python3 -m pip install --upgrade pip --break-system-packages
                                pip install -r requirements.txt --break-system-packages
                                python3 manage.py makemigrations api
                                # python3 manage.py test
                            '''
                        }
                    }
                }
            }

            stage('Run Services') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    parallel(
                        'Backend': {
                            dir("${BACKEND_DIR}") {
                                sh '''
                                    python3 manage.py migrate --settings=the_plug_backend_django.e2e_test_settings
                                    python3 manage.py loaddata api/fixtures/herbs.json --settings=the_plug_backend_django.e2e_test_settings
                                    nohup python3 manage.py runserver 0.0.0.0:8080 --settings=the_plug_backend_django.e2e_test_settings &
                                '''
                            }
                        },
                        'Frontend': {
                            dir("${FRONTEND_DIR}") {
                                sh '''
                                    npm ci
                                    nohup npm run dev -- --port 4200 &
                                '''
                            }
                        }
                    )
                }
            }

            // TODO debug
            stage('E2E Tests') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    dir("${FRONTEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                curl -X GET http://localhost:8080/api/herb/list/
                                curl -X GET http://localhost:4200
                                npx wait-on http-get://localhost:8080/api/herb/list/
                                npx wait-on http-get://localhost:4200
                                npx cypress run --config-file cypress.config.ts --browser chrome --config baseUrl=http://localhost:4200 env.apiUrl=http://localhost:8080/api/herb/list/
                            '''
                        }
                    }
                }
            }

            stage('Performance Tests') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    dir("${BACKEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                curl -X GET http://localhost:8080/api/herb/list/
                                curl -X GET http://localhost:4200
                                locust -f locustfile.py --headless -u 100 -r 10 -t 3m --host http://localhost:8080/api
                            '''
                        }
                    }
                }
            }

            // TODO debug
            stage('DAST Tests') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    script {
                        docker.image('ghcr.io/zaproxy/zaproxy:stable').inside {
                            sh '''
                                curl -X GET http://host.docker.internal:8080/api/herb/list/
                                curl -X GET http://host.docker.internal:4200
                                curl -X GET http://172.17.0.1:8080/api/herb/list/
                                curl -X GET http://172.17.0.1:4200
                                mkdir -p /zap/wrk
                                zap-full-scan.py -t http://localhost:8080/api/
                            '''
                        }
                    }
                }
            }

            // TODO debug
            stage('Docker Build & Push') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    script {
                        docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-creds') {
                            docker.build('wallys02/the-plug-backend:latest', './backend/the_plug_backend_django')
                                .push()
                        }
                    }
                }
            }

            // TODO debug
            stage('Helm Deployment') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    dir('k8s/helm/the-plug') {
                        sh '''
                            chmod +x ./run-helm.sh
                            ./run-helm.sh
                            kubectl rollout restart deployment/backend --namespace plug-namespace
                        '''
                    }
                }
            }
    }

    post {
        always {
            cleanWs()
        }
    }
}
