pipeline {
    agent any

    environment {
        SONAR_TOKEN_BACKEND = credentials('sonar-token-backend')
        DB_PASSWORD = credentials('db-password')
        DB_USER = 'admin'
        DB_NAME = 'postgres'
        DB_HOST = 'localhost:5432'
        EMAIL_HOST_PASSWORD = credentials('email-host-password')
        EMAIL_HOST_USER = credentials('email-host-user')
        SECRET_KEY = credentials('secret-key')
        ALLOWED_HOSTS = '*'
        DEBUG = '1'
        CACHE_ENDPOINT = 'no'
        CACHE_PASSWORD = 'no'
        USE_CACHE = '0'
        DOCKER_REGISTRY = 'https://docker.io'
        BACKEND_IMAGE = 'wallys02/the-plug-backend'
        PIP_CACHE_DIR = "${env.HOME}/.cache/pip"
        NPM_CONFIG_CACHE = "${env.HOME}/.cache/npm"
        KUBECONFIG = "${env.HOME}/.kube/config"
        BACKEND_DIR = 'backend/the_plug_backend_django'
        FRONTEND_DIR = 'frontend/the_plug_svelte_frontend'
        CHANGESET_DIR = 'backend/**'
    }

    triggers {
        pollSCM '* * * * *'
    }

    stages {
            /*stage('SonarQube Analysis') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                environment {
                    SCANNER_HOME = tool 'sonar-scanner-7'
                }

                steps {
                    dir("${BACKEND_DIR}") {
                        withSonarQubeEnv('sonar-backend') {
                            sh('$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.token=$SONAR_TOKEN_BACKEND')
                        }
                    }
                }
            }

            stage('Backend Tests') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    dir("${BACKEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                python3 -m pip install --upgrade pip --break-system-packages
                                pip install -r requirements.txt --break-system-packages
                                python3 manage.py makemigrations api
                                python3 manage.py test
                            '''
                        }
                    }
                }
            }*/

            stage('Setup Docker Network') {
                when {
                    changeset "${CHANGESET_DIR}"
                }

                steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh 'docker network create test'
                    }
                }
            }

            // TODO debug if test containers can access services
            stage('Run Services') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    dir("${BACKEND_DIR}") {
                        script {
                            docker.build('wallys02/the-plug-backend:latest').run(
                                '--name backend-service --rm --network test --entrypoint ./test-entrypoint.sh ' +
                                '-e "DB_PASSWORD=$DB_PASSWORD" ' +
                                '-e "DB_USER=$DB_USER" ' +
                                '-e "DB_NAME=$DB_NAME" ' +
                                '-e "DB_HOST=$DB_HOST" ' +
                                '-e "EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD" ' +
                                '-e "EMAIL_HOST_USER=$EMAIL_HOST_USER" ' +
                                '-e "SECRET_KEY=$SECRET_KEY" ' +
                                '-e "ALLOWED_HOSTS=$ALLOWED_HOSTS" ' +
                                '-e "DEBUG=$DEBUG" ' +
                                '-e "CACHE_ENDPOINT=$CACHE_ENDPOINT" ' +
                                '-e "CACHE_PASSWORD=$CACHE_PASSWORD" ' +
                                '-e "USE_CACHE=$USE_CACHE"'
                            )
                        }
                    }

                    dir("${FRONTEND_DIR}") {
                        script {
                            /*docker.build('wallys02/the-plug-frontend:latest')*/
                            docker.image('wallys02/the-plug-frontend:latest').run('--name frontend --rm --network test')
                        }
                    }
                }
            }

            // TODO debug Error [ERR_MODULE_NOT_FOUND]: Cannot find package 'cypress' imported from /e2e/cypress.config.ts Did you mean to import "cypress/index.js"?
            stage('E2E Tests') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    dir("${FRONTEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            script {
                                docker.image('cypress/included:14.3.3').run(
                                    '-v $PWD:/e2e -w /e2e --network test --entrypoint cypress run --config-file cypress.config.ts --browser chrome ' +
                                    '-e "CYPRESS_BASE_URL=http://frontend" -e "CYPRESS_API_URL=http://backend-service:8080/api/"'
                                )
                            }
                        }
                    }
                }
            }

            // TODO debug
            /*
                $ docker run -t -d -u 1000:1000 --name locust --rm --network test -v $PWD:/mnt/locust -w /var/jenkins_home/workspace/backend/backend/the_plug_backend_django -v /var/jenkins_home/workspace/backend/backend/the_plug_backend_django:/var/jenkins_home/workspace/backend/backend/the_plug_backend_django:rw,z -v /var/jenkins_home/workspace/backend/backend/the_plug_backend_django@tmp:/var/jenkins_home/workspace/backend/backend/the_plug_backend_django@tmp:rw,z -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** locustio/locust:latest cat
                $ docker top 181e4e60c01c7cf73ab1bb904816de647ad82a516ff27b1994198b60a7ac2e3f -eo pid,comm
                ERROR: The container started but didn't run the expected command. Please double check your ENTRYPOINT does execute the command passed as docker run argument, as required by official docker images (see https://github.com/docker-library/official-images#consistency for entrypoint consistency requirements).
                Alternatively you can force image entrypoint to be disabled by adding option `--entrypoint=''`.
                [Pipeline] {
                [Pipeline] sh
                + locust -f /mnt/locust/locustfile.py --headless -u 100 -r 10 -t 3m --host http://backend-service:8080/api
            */
            stage('Performance Tests') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    dir("${BACKEND_DIR}") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            script {
                                docker.image('locustio/locust:latest').run('--name locust --network test -v $PWD:/mnt/locust ' +
                                 '--entrypoint locust -f /mnt/locust/locustfile.py --headless -u 100 -r 10 -t 3m --host http://backend-service:8080/api')
                            }
                        }
                    }
                }
            }

            // TODO debug mkdir: cannot create directory ‘/zap’: Permission denied
            stage('DAST Tests') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    script {
                        docker.image('ghcr.io/zaproxy/zaproxy:stable').withRun('--network test -u root') {
                            sh '''
                                mkdir -p /zap/wrk
                                zap-full-scan.py -t http://backend-service:8080/api/
                            '''
                        }
                    }
                }
            }

            stage('Cleanup') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    sh '''
                        docker stop frontend
                        docker stop backend-service
                    '''
                }
            }

            // TODO debug
            stage('Docker Build & Push') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    script {
                        docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-creds') {
                            docker.build('wallys02/the-plug-backend:latest', './backend/the_plug_backend_django')
                                .push()
                        }
                    }
                }
            }

            // TODO debug
            stage('Helm Deployment') {
                /*when {
                    changeset "${CHANGESET_DIR}"
                }*/

                steps {
                    dir('k8s/helm/the-plug') {
                        sh '''
                            chmod +x ./run-helm.sh
                            ./run-helm.sh
                            kubectl rollout restart deployment/backend --namespace plug-namespace
                        '''
                    }
                }
            }
    }

    post {
        always {
            cleanWs()
        }
    }
}
